<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CodeWar [15]-Roman Numerals Helper</title>
      <link href="/2024/09/27/codewar_30_days/codewar-15/"/>
      <url>/2024/09/27/codewar_30_days/codewar-15/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>寫兩個函數，可以將 1~4,000 範圍內的整數轉為羅馬數字，也可以反過來將羅馬數字轉為整數。</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>整數轉為羅馬數字：由左側最大的數值開始轉換為羅馬數字，轉換後就從整數中扣掉該值</li><li>羅馬數字轉換為整數：由左側最大的數開始比對羅馬數字清單，比對符合者就將字串從被比對的字符中刪除，同時將比對到的數字加總</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rValues = [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">1000</span>, <span class="attr">symbol</span>: <span class="string">&#x27;M&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">900</span>, <span class="attr">symbol</span>: <span class="string">&#x27;CM&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">500</span>, <span class="attr">symbol</span>: <span class="string">&#x27;D&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">400</span>, <span class="attr">symbol</span>: <span class="string">&#x27;CD&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">100</span>, <span class="attr">symbol</span>: <span class="string">&#x27;C&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">90</span>, <span class="attr">symbol</span>: <span class="string">&#x27;XC&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">50</span>, <span class="attr">symbol</span>: <span class="string">&#x27;L&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">40</span>, <span class="attr">symbol</span>: <span class="string">&#x27;XL&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">10</span>, <span class="attr">symbol</span>: <span class="string">&#x27;X&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">9</span>, <span class="attr">symbol</span>: <span class="string">&#x27;IX&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">5</span>, <span class="attr">symbol</span>: <span class="string">&#x27;V&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">symbol</span>: <span class="string">&#x27;IV&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">symbol</span>: <span class="string">&#x27;I&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RomanNumerals</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">toRoman</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> originNum = num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;rValues.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (originNum &gt;= rValues[i].<span class="property">value</span>) &#123;</span><br><span class="line">        originNum -= rValues[i].<span class="property">value</span>;</span><br><span class="line">        result += rValues[i].<span class="property">symbol</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">fromRoman</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> originString = str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;rValues.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (originString.<span class="title function_">startsWith</span>(rValues[i].<span class="property">symbol</span>)) &#123;</span><br><span class="line">        originString = originString.<span class="title function_">slice</span>(rValues[i].<span class="property">symbol</span>.<span class="property">length</span>, originString.<span class="property">length</span>);</span><br><span class="line">        result += rValues[i].<span class="property">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [11]-Greed is good</title>
      <link href="/2024/09/23/codewar_30_days/codewar-11/"/>
      <url>/2024/09/23/codewar_30_days/codewar-11/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>寫一個計算骰子遊戲得分的 function。<br>一共會擲骰 5 次，每次所用的骰子都是 6 面骰。<br>得分規則如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  三個 1 點 =&gt; 1000 分</span></span><br><span class="line"><span class="comment">  三個 6 點 =&gt;  600 分</span></span><br><span class="line"><span class="comment">  三個 5 點 =&gt;  500 分</span></span><br><span class="line"><span class="comment">  三個 4 點 =&gt;  400 分</span></span><br><span class="line"><span class="comment">  三個 3 點 =&gt;  300 分</span></span><br><span class="line"><span class="comment">  三個 2 點 =&gt;  200 分</span></span><br><span class="line"><span class="comment">  一個 1 點  =&gt;  100 分</span></span><br><span class="line"><span class="comment">  一個  5 點  =&gt;   50 分</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注意：一個骰子只能被計算為一次得分。</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>所有規則中只有骰面 1 和骰面 5 的得分規則和其他點數不同</li><li>骰面 1 的得分規則最複雜，骰面 5 次之</li><li>除了骰面 1 和骰面 5 ，其餘骰面沒有 3 次以上則無法得分</li><li>將 5 次執骰結果以陣列格式紀錄，並由小到大按照順序排列，再以連續數字為分組，計算出本次執骰結果中所得的各點次數</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">score</span>(<span class="params"> dice </span>) &#123;</span><br><span class="line">  <span class="comment">// 將擲骰結果按照順序排列後再切分，會得到像是 [&#x27;222&#x27;, &#x27;3&#x27;, &#x27;4&#x27;] 這樣的結果來表示一共獲得 3 次 2 點，1 次 3 點，1 次 4 點</span></span><br><span class="line">  <span class="keyword">let</span> sortArray = ([].<span class="title function_">concat</span>(dice)).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>)=&gt;</span> &#123; <span class="keyword">return</span> a - b; &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">match</span>(<span class="regexp">/(\d)\1*/g</span>)</span><br><span class="line">  <span class="keyword">let</span> score = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 計分 function</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getPoint</span> = (<span class="params">diceName, times</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> points = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 如果骰面點數為 1，計算出現了幾次不足 3 次的骰面 1</span></span><br><span class="line">   <span class="keyword">if</span> (diceName == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">     points += (times % <span class="number">3</span>) * <span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果骰面點數為 5，計算出現了幾次不足三次的骰面 5</span></span><br><span class="line">   <span class="keyword">if</span> (diceName == <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">     points += (times % <span class="number">3</span>) * <span class="number">50</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果次數達三次以上，檢查是不是點數 1，如果是，直接加 1000 分；如果不是，根據骰面點數加上（骰面點數 * 100） 的分數</span></span><br><span class="line">   <span class="keyword">if</span> (times &gt; <span class="number">2</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (diceName == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">       points += <span class="number">1000</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       points += <span class="built_in">parseInt</span>(diceName) * <span class="number">100</span>;</span><br><span class="line">     &#125; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> points;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 遍歷排列好的陣列來計分</span></span><br><span class="line">  sortArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">dices</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> times = dices.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> diceName = dices[<span class="number">0</span>].<span class="title function_">toString</span>();</span><br><span class="line">    score += <span class="title function_">getPoint</span>(diceName, times);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="優化方案"><a href="#優化方案" class="headerlink" title="優化方案"></a>優化方案</h3><p>原先的寫法是按照順序的寫法，可以觀察到有很多條件式，擴充不易並且當遊戲中的執骰次數超過 5 次時就會計算錯誤。<br>可以考量這點繼續優化它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">score</span>(<span class="params"> dice </span>) &#123;</span><br><span class="line">  <span class="comment">// 記錄各骰面的次數</span></span><br><span class="line">  <span class="keyword">var</span> dc = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 紀錄三連骰面的得分，例如 3 個 1 點可以得到 1000 分</span></span><br><span class="line">  <span class="keyword">var</span> tdr = [<span class="number">1000</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>];</span><br><span class="line">  <span class="comment">// 紀錄單骰得分，例如 1 個 1 點可以得到 100 分  </span></span><br><span class="line">  <span class="keyword">var</span> sdr = [<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>]; </span><br><span class="line">  <span class="comment">// 遍歷陣列來計算擲到每個骰面幾次</span></span><br><span class="line">  dice.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123; dc[x-<span class="number">1</span>]++; &#125;); </span><br><span class="line">  <span class="comment">// 利用 reduce 累加加總，s 是累加總和，x 是當前次數，i 是點數對應的索引</span></span><br><span class="line">  <span class="comment">// 如果某個點數 &gt;= 3，則加入當前三連骰的對應分數；單一骰子的分數是 sdr[i] * (x % 3)，因為一個骰子不可以重複計算得分，如果在三連骰中計算過了，就不可以再在單骰上計算分數</span></span><br><span class="line">  <span class="keyword">return</span> dc.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">s,x,i</span>)&#123; </span><br><span class="line">    <span class="keyword">return</span> s + (x &gt;= <span class="number">3</span>? tdr[i] : <span class="number">0</span>) + sdr[i]*(x % <span class="number">3</span>);</span><br><span class="line">  &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [12]-Maximum subarray sum</title>
      <link href="/2024/09/23/codewar_30_days/codewar-12/"/>
      <url>/2024/09/23/codewar_30_days/codewar-12/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">maxSequence</span>([-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"><span class="comment">// should be 6: [4, -1, 2, 1]</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>遍歷陣列來累加，每次迴圈計算中判斷現在的數字要累加還是不累加較好</li><li>如果累加的效果差，就直接以累加的數字作為起點重新計算</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSequence = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr.<span class="property">length</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> max_end_here = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> max_sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max_end_here + arr[i] &gt; arr[i]) &#123;</span><br><span class="line">      max_end_here += arr[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      max_end_here = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (max_end_here &gt; max_sum) &#123;</span><br><span class="line">      max_sum = max_end_here;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [13]-Tick-Tack-Toe Checker</title>
      <link href="/2024/09/23/codewar_30_days/codewar-13/"/>
      <url>/2024/09/23/codewar_30_days/codewar-13/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>給定一個長度為 3 的二維陣列，寫一個檢查 ox 遊戲贏家的函式。<br>0 代表沒有棋子，1 代表 x，2 代表 o，如果贏家是 x，回傳 1；如果贏家是 o，回傳 2；如果沒有贏家且棋盤上還有空位，回傳 -1，如果平局，回傳 0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isSolved</span>([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="comment">// return -1</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>橫排檢查 3 次，直排檢查 3 次，斜角線檢查 2 次。<br>二維陣列攤平，暴力解碼出所有可能的贏家組合，再和雙方棋子的排列位置做比對，篩出贏家。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  給棋盤每個位置標號，</span></span><br><span class="line"><span class="comment"> [ 1,2,3 ]</span></span><br><span class="line"><span class="comment"> [ 4,5.6 ]</span></span><br><span class="line"><span class="comment"> [ 7.8.9 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSolved</span>(<span class="params">board</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = board.<span class="title function_">join</span>().<span class="title function_">replace</span>(<span class="regexp">/\,/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> wins = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],  <span class="comment">// 橫排贏的方式</span></span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],  [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>],  <span class="comment">// 直排贏的方式</span></span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>],  [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]   <span class="comment">// 斜角贏的方式</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o = []; <span class="comment">// o 棋子位置</span></span><br><span class="line">  <span class="keyword">let</span> x = []; <span class="comment">// x 棋子位置</span></span><br><span class="line">  <span class="comment">// 遍歷棋盤，得到 ox 雙方的棋位陣列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      x.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result[i] == <span class="number">2</span>) &#123;</span><br><span class="line">      o.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 雙方棋位與獲勝方案對照，看看有無贏家</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">hasWin</span> = (<span class="params">positions</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> wins.<span class="title function_">some</span>(<span class="function">(<span class="params">win</span>) =&gt;</span> win.<span class="title function_">every</span>(<span class="function">(<span class="params">pos</span>) =&gt;</span> positions.<span class="title function_">includes</span>(pos)));</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> xWins = <span class="title function_">hasWin</span>(x);</span><br><span class="line">  <span class="keyword">let</span> oWins = <span class="title function_">hasWin</span>(o);</span><br><span class="line">  <span class="keyword">let</span> isFinished = !result.<span class="title function_">includes</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (xWins) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (oWins) <span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">  <span class="keyword">if</span> (!isFinished) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [14]-Not very secure</title>
      <link href="/2024/09/23/codewar_30_days/codewar-14/"/>
      <url>/2024/09/23/codewar_30_days/codewar-14/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>寫一個驗證字串是否為純字母&#x2F;數字的 function。<br>這個字串不會是 null，所以不用檢查這部分；除此之外，回傳 false 的條件包括長度為 0、包含空格、包含下底線。</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>正則表達式，篩出所有字母和數字並刪掉，如果扣完了，該字串還有長度，表示不符合規則。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alphanumeric</span>(<span class="params">string</span>)&#123;</span><br><span class="line">  <span class="comment">// 如果該字串長度為 0，表示是 &quot;&quot;，不符合條件</span></span><br><span class="line">  <span class="keyword">if</span> (!string.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  <span class="comment">// 刪掉所有字母與數字，如果還有長度，表示不符合條件</span></span><br><span class="line">  <span class="keyword">if</span> (string.<span class="title function_">replace</span>(<span class="regexp">/[a-z]|[0-9]/gi</span>, <span class="string">&#x27;&#x27;</span>).<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 剩下的是符合條件者，回傳 true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [10]-RGB To Hex Conversion</title>
      <link href="/2024/09/22/codewar_30_days/codewar-10/"/>
      <url>/2024/09/22/codewar_30_days/codewar-10/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">rgbConvertHex</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) --&gt; <span class="string">&quot;FFFFFF&quot;</span></span><br><span class="line"><span class="title function_">rgbConvertHex</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">300</span>) --&gt; <span class="string">&quot;FFFFFF&quot;</span></span><br><span class="line"><span class="title function_">rgbConvertHex</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)       --&gt; <span class="string">&quot;000000&quot;</span></span><br><span class="line"><span class="title function_">rgbConvertHex</span>(<span class="number">148</span>, <span class="number">0</span>, <span class="number">211</span>)   --&gt; <span class="string">&quot;9400D3&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>插入的會是一組長度為 3 ，內容是數字的陣列</li><li>所有超過範圍（0~255）的值會以最接近的範圍內整數做處理。例如：-1 會被視作 0，而浮點數會以最接近的整數做處理，因此所有值需要先做四捨五入</li><li>先處理數字，將輸入的數值轉換為範圍內的數字，再轉換成 16 進位</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rgbConvertHex</span>(<span class="params">r, g, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [r,g,b].<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(item), <span class="number">255</span>))</span><br><span class="line">      .<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">      .<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [09]-Create Phone Number</title>
      <link href="/2024/09/17/codewar_30_days/codewar-09/"/>
      <url>/2024/09/17/codewar_30_days/codewar-09/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createPhoneNumber</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]) <span class="comment">// =&gt; returns &quot;(123) 456-7890&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>插入的位置是固定的，可以直接用 regex + replace 做群組取代</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPhoneNumber</span>(<span class="params">numbers</span>)&#123; </span><br><span class="line">   <span class="keyword">return</span> numbers.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/(\d&#123;3&#125;)(\d&#123;3&#125;)(\d&#123;4&#125;)/</span>,<span class="string">&#x27;\($1\) $2-$3&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="優化方案"><a href="#優化方案" class="headerlink" title="優化方案"></a>優化方案</h3><p>原來的寫法閱讀較不直覺。參考大眾投票第一名的解法，閱讀起來很好懂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPhoneNumber</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> format = <span class="string">&quot;(xxx) xxx-xxxx&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    format = format.<span class="title function_">replace</span>(<span class="string">&#x27;x&#x27;</span>, numbers[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [08]-Moving Zeros To The End</title>
      <link href="/2024/09/16/codewar_30_days/codewar-08/"/>
      <url>/2024/09/16/codewar_30_days/codewar-08/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">moveZeros</span>([<span class="literal">false</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;a&quot;</span>]) <span class="comment">// returns[false,1,1,2,1,3,&quot;a&quot;,0,0]</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>把「不含 0 」的陣列和「只包含 0 」的陣列組裝起來</li><li>用 filter 濾掉</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeros</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item !== <span class="number">0</span>);</span><br><span class="line">  &#125;).<span class="title function_">concat</span>(arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item === <span class="number">0</span>);</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="優化方案"><a href="#優化方案" class="headerlink" title="優化方案"></a>優化方案</h3><p>原本的思路是組裝兩個過濾好的陣列，但組裝的前提是需要過濾（遍歷）兩遍來獲取這兩個過濾好的陣列，在資料大的時候就會跑很慢。<br>可以改成：</p><ol><li>在遍歷的時候利用 <code>sort</code> 重新排序</li><li>過濾掉 0，再比對過濾先後的陣列長度，最後把缺少的部分補 0 回去</li></ol>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [07]-Unique in Order</title>
      <link href="/2024/09/12/codewar_30_days/codewar-07/"/>
      <url>/2024/09/12/codewar_30_days/codewar-07/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">uniqueInOrder</span>(<span class="string">&#x27;AAAABBBCCDAABBB&#x27;</span>) == [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"><span class="title function_">uniqueInOrder</span>(<span class="string">&#x27;ABBCcAD&#x27;</span>)         == [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"><span class="title function_">uniqueInOrder</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])       == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>字串拆成陣列（用 … 運算子可直接處理掉陣列和字串的情形）</li><li>遍歷陣列，比對每個元素是否等於上一個元素</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uniqueInOrder = <span class="keyword">function</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> [...iterable].<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> iterable[index] !== iterable[index - <span class="number">1</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [05]-Simple Pig Latin</title>
      <link href="/2024/09/10/codewar_30_days/codewar-05/"/>
      <url>/2024/09/10/codewar_30_days/codewar-05/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pigIt</span>(<span class="string">&#x27;Pig latin is cool&#x27;</span>); <span class="comment">// igPay atinlay siay oolcay</span></span><br><span class="line"><span class="title function_">pigIt</span>(<span class="string">&#x27;Hello world !&#x27;</span>);     <span class="comment">// elloHay orldway !</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>使用正則和 <code>replace</code> 做過濾與取代</li><li>要注意只有非字母的情況是不做處理的（例如：範例 2 的 ! 輸出後還是 ! 而不是 !ay）</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pigIt</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Words</span> = str.<span class="title function_">replace</span>(<span class="regexp">/\w+/g</span>, <span class="keyword">function</span>(<span class="params">word</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> word.<span class="title function_">slice</span>(<span class="number">1</span>) + word[<span class="number">1</span>] + <span class="string">&#x27;ay&#x27;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Words</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [06]-Stop gninnipS My sdroW!</title>
      <link href="/2024/09/10/codewar_30_days/codewar-06/"/>
      <url>/2024/09/10/codewar_30_days/codewar-06/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params"><span class="string">&quot;Welcome&quot;</span></span>) <span class="comment">// &quot;emocleW&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params"><span class="string">&quot;Hey fellow warriors&quot;</span></span>) <span class="comment">// &quot;Hey wollef sroirraw&quot; </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params"><span class="string">&quot;This is a test&quot;</span></span>) <span class="comment">// &quot;This is a test&quot; </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params"><span class="string">&quot;This is another test&quot;</span></span>) <span class="comment">// &quot;This is rehtona test&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>將句子拆成最小判斷單位（單字），檢查長度是否大於或等於 5，再拼回句子</li><li>使用 split、slice 等方法一次處理掉空白符</li><li>注意處理只有單詞（沒有空白符）的情況</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> string</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">4</span> ? word.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) : word) </span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [04]-Equal Slides Of An Array</title>
      <link href="/2024/09/07/codewar_30_days/codewar-04/"/>
      <url>/2024/09/07/codewar_30_days/codewar-04/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">findEvenIndex</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]) <span class="comment">// return 3，因為 1 + 2 + 3 = 3 + 2 + 1</span></span><br><span class="line"><span class="title function_">findEvenIndex</span>([<span class="number">1</span>,<span class="number">100</span>,<span class="number">50</span>,-<span class="number">51</span>,<span class="number">1</span>,<span class="number">1</span>]) <span class="comment">// return 1, 因為 1 = 50 + -51 + 1 +1</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>分成「裁切點左側」和「裁切點右側」兩邊計算</li><li>裁切點本身的數值不加入加總</li><li>使用一個迴圈遍歷陣列來移動裁切點</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findEvenIndex</span>(<span class="params">arr</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> leftSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> arrSum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc + cur;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftSum === arrSum - leftSum - arr[i]) <span class="keyword">return</span> i;</span><br><span class="line">    leftSum += arr[i]; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [03]-Decode the Mose code</title>
      <link href="/2024/09/06/codewar_30_days/codewar-03/"/>
      <url>/2024/09/06/codewar_30_days/codewar-03/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">decodeMorse</span>(<span class="string">&#x27;.... . -.--   .--- ..- -.. .&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;HEY JUDE&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>兩個（含）以上的空白作為區分，可以切出一個包含單字的陣列</li><li>遍歷切出來的單字陣列中的元素，將元素再切成字母陣列</li><li>遍歷字母陣列解碼</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">decodeMorse = <span class="keyword">function</span>(<span class="params">morseCode</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> wordArray = morseCode.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s&#123;2,&#125;/g</span>);</span><br><span class="line">  <span class="keyword">let</span> lettersArray = wordArray.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> word = item.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s/g</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">letter, i</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">MORSE_CODE</span>[letter];</span><br><span class="line">    &#125;).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> word;</span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> lettersArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [01]-Converting to camel case</title>
      <link href="/2024/09/05/codewar_30_days/codewar-01/"/>
      <url>/2024/09/05/codewar_30_days/codewar-01/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toCamelCase</span>(<span class="string">&#x27;the_stealth-warrior&#x27;</span>); <span class="comment">// theStealthWarrior</span></span><br><span class="line"><span class="title function_">toCamelCase</span>(<span class="string">&#x27;The_stealth_warrior&#x27;</span>); <span class="comment">// TheStealthWarrior</span></span><br><span class="line"><span class="title function_">toCamelCase</span>(<span class="string">&#x27;The-Stealth_Warrior&#x27;</span>); <span class="comment">// TheStealthWarrior</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以將要轉換的字串依據 _ 或 - 切成字段來處理。</p><ul><li>例如：將 the_stealth_warrior 切成 <code>[&#39;the&#39;, &#39;stealth&#39;, &#39;warrior&#39;]</code></li><li>切出來後除了第一個字段需要另外判斷，其他字段要做的都很單純：將首字母改為大寫。</li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toCamelCase</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  str = str.<span class="title function_">trim</span>(); <span class="comment">// 去除首尾空字符</span></span><br><span class="line">  <span class="keyword">if</span> (!str.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>; <span class="comment">// 如果沒東西（空字串）就回傳空字串，下面的程式就不用跑了</span></span><br><span class="line">  <span class="keyword">let</span> isOriginCapitalized = (str[<span class="number">0</span>] === str[<span class="number">0</span>].<span class="title function_">toUpperCase</span>()) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 切字段後透過 map 遍歷再拼裝回傳，最後用 join 將字段陣列組裝在一起</span></span><br><span class="line">  str = str.<span class="title function_">split</span>(<span class="regexp">/[-_]/</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!index &amp;&amp; !isOriginCapitalized) &#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + item.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="優化方案"><a href="#優化方案" class="headerlink" title="優化方案"></a>優化方案</h3><p>改用 <code>reduce</code> 的概念來做，每一次的迴圈接著上一次的結果來繼續處理，可以讓程式碼更簡潔。<br>搭配正則表達式和 replace 做字串取代，可以減少拼裝。</p>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeWar [02]-Disemvowel Trolls</title>
      <link href="/2024/09/05/codewar_30_days/codewar-02/"/>
      <url>/2024/09/05/codewar_30_days/codewar-02/</url>
      
        <content type="html"><![CDATA[<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">disemvowel</span>(<span class="string">&quot;This website is for losers LOL!&quot;</span>);</span><br><span class="line"> <span class="comment">//&quot;Ths wbst s fr lsrs LL!&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>用正則表達式和 replace 將所有母音移除</li></ol><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">disemvowel</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/[aeiou]/gi</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CodeWar 30 天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ES6] Const, Let, Var</title>
      <link href="/2024/08/15/javascript_basic/const_let_and_var/"/>
      <url>/2024/08/15/javascript_basic/const_let_and_var/</url>
      
        <content type="html"><![CDATA[<h3 id="常見宣告"><a href="#常見宣告" class="headerlink" title="常見宣告"></a>常見宣告</h3><table><thead><tr><th>特性</th><th><code>const</code></th><th><code>let</code></th><th><code>var</code></th></tr></thead><tbody><tr><td><strong>作用域</strong></td><td>區塊作用域 (Block Scope)</td><td>區塊作用域 (Block Scope)</td><td>函數作用域 (Function Scope)</td></tr><tr><td><strong>是否可以重新賦值</strong></td><td>不可以</td><td>可以</td><td>可以</td></tr><tr><td><strong>變數提升 (Hoisting)</strong></td><td>暫時性死區（TDZ）</td><td>暫時性死區（TDZ）</td><td>有</td></tr><tr><td><strong>初始化</strong></td><td>必須在聲明時初始化</td><td>必須先聲明後使用，否則報錯</td><td>可在未初始化情況下使用 (<code>undefined</code>)</td></tr><tr><td><strong>常見用途</strong></td><td>不可變的常量、參數</td><td>需要在區塊內多次賦值的變數</td><td>舊版代碼、需要跨多個區塊使用的變數</td></tr></tbody></table><span id="more"></span><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>Block Scope</li><li><strong>不可以</strong>重新賦值</li><li>必須在宣告時就初始化</li><li>會建立一個新屬性在 window 下</li><li>提升現象改為了暫時性死區（TDZ）</li><li>常見用途：不可變的常數、參數</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>Block Scope</li><li><strong>可以</strong>重新賦值</li><li><strong>不可以重複宣告</strong></li><li>必須先聲明後再使用，否則報錯</li><li>會建立一個新屬性在 window 下</li><li>提升現象改為了暫時性死區（TDZ）</li><li>常見用途：需要在區塊內多次賦值的變數</li></ul><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul><li>Function Scope</li><li>可以重複宣告</li><li>會建立一個新屬性在 window 下</li><li>有變數提升現象，但是<strong>初始化不提升</strong><ul><li><code>var a = 1;</code> 可以被視為 <code>var a;</code> 後再 <code>a = 1;</code>，其中 <code>var a </code> 會提升</li></ul></li><li>是比較舊的寫法，因為比較不嚴謹，容易污染到全域變數，不推薦使用</li><li>常見用途：在舊版程式碼中常見，或是用於需要跨多個區塊使用的變數</li></ul><h3 id="不宣告的情境？"><a href="#不宣告的情境？" class="headerlink" title="不宣告的情境？"></a>不宣告的情境？</h3><p>在不宣告的情境下，使用 Const、Let 和 Var 有什麼差別？<br>如果在瀏覽器的 Inspector 中直接賦值給變數而不宣告，這個變數就會成為全局變數，同時也會成為 <code>window</code> 物件的屬性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;ready&#x27;</span>; <span class="comment">// 未使用 var、let 或 const 宣告，直接賦值 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &quot;ready&quot; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">// &quot;ready&quot;</span></span><br></pre></td></tr></table></figure><ol><li><code>a</code> 被直接賦值，而不使用 <code>var</code>、<code>let</code> 或 <code>const</code> 宣告。</li><li><code>a</code> 變數自動成為全局變數，並且會是 <code>window</code> 物件的屬性。</li></ol><h3 id="變數和屬性的差異"><a href="#變數和屬性的差異" class="headerlink" title="變數和屬性的差異"></a>變數和屬性的差異</h3><p>屬性可以被刪除，變數<strong>不可以</strong>被刪除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;ready&#x27;</span>; <span class="comment">// 未使用 var、let 或 const 宣告，直接賦值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &quot;ready&quot; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">// &quot;ready&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: a is not defined </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在此案例中，因為沒有使用 <code>var</code>、<code>let</code>、<code>const</code> 來宣告 <code>a</code>，因此 <code>a</code>  變成了全局變數，同時成為了 <code>window</code> 物件的屬性。</p><p>因為它是個屬性，因此可以透過 <code>delete</code> 被刪除。</p><p>當你在瀏覽器的 Inspector 中直接賦值給一個變數，而不使用 <code>var</code>、<code>let</code> 或 <code>const</code> 聲明語句時，這個變數會被創建為全域變數。由於 JavaScript 的特殊性，全域變數會自動成為 <code>window</code> 物件的屬性。因此，它既是變數，也是 <code>window</code> 物件的屬性。</p><h3 id="全域變數"><a href="#全域變數" class="headerlink" title="全域變數"></a>全域變數</h3><p>當我們在全域作用域（即不在任何函數或區塊內部）宣告變數時，它會自動成為全域變數。這些變數會被存儲在 <code>window</code> 物件中。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 使用 var 聲明全域變數</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="window-物件的屬性"><a href="#window-物件的屬性" class="headerlink" title="window 物件的屬性"></a><code>window</code> 物件的屬性</h3><p>因為 <code>window</code> 物件代表全域作用域，所以<strong>所有的全域變數實際上是 <code>window</code> 物件的屬性</strong>。<br>我們可以通過 <code>window</code> 來訪問這些變數：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalVar</span>); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="let-和-const-宣告的全域變數"><a href="#let-和-const-宣告的全域變數" class="headerlink" title="let 和 const 宣告的全域變數"></a><code>let</code> 和 <code>const</code> 宣告的全域變數</h3><p>使用 <code>let</code> 或 <code>const</code> 宣告的全域變數不會自動成為 <code>window</code> 物件的屬性。<br>這些變數仍然是全域的，但它們不會作為 <code>window</code> 的屬性存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> globalLet = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 使用 let 聲明全域變數</span></span><br><span class="line"><span class="keyword">const</span> globalConst = <span class="string">&#x27;foo&#x27;</span>; <span class="comment">// 使用 const 聲明全域變數</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalLet</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">globalConst</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在這個例子中：</p><ul><li><code>globalLet</code> 和 <code>globalConst</code> 是全域變數，但它們不會作為 <code>window</code> 的屬性。</li></ul><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><ul><li><strong>全域變數</strong>：在全域作用域內聲明的變數會自動成為 <code>window</code> 物件的屬性（使用 <code>var</code> 聲明的變數）。</li><li><strong><code>window</code> 物件的屬性</strong>：全域變數（使用 <code>var</code> 聲明）實際上是 <code>window</code> 物件的屬性。</li><li>**<code>let</code> 和 <code>const</code>**：這些變數在全域作用域內聲明時，不會成為 <code>window</code> 的屬性，但它們仍然是全域變數。</li></ul><h2 id="基本型別"><a href="#基本型別" class="headerlink" title="基本型別"></a>基本型別</h2><p><code>Javascript</code> 的基本型別有以下六種：</p><ul><li>String 字串</li><li>Number 數字<ul><li><code>NaN</code> 的型別是數字（<code>console.log(typeof(NaN)); // number</code>）</li></ul></li><li>Boolean 布林值</li><li>Undefined 尚未被賦予值</li><li>Null 有被賦予值，是空值</li><li>Symbol</li></ul><p>Object 物件&#96;。</p><p><code>null</code> 和 <code>undefined</code> 和 <code>0</code> 的差異是什麼？</p><ul><li><code>null</code> 有被賦值，只是這個值是空值</li><li><code>undefined</code> 是尚未被賦予值</li></ul><p>用生活中的例子了解 <code>0</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code></p><ul><li><strong>0</strong>：捲筒上有衛生紙，但數量是 0（也就是說，衛生紙已經用完了）。這表示衛生紙存在，但數量為零。</li><li><strong>NaN</strong>（Not a Number）：捲筒上有物品，但它不是衛生紙。這表示物品存在，但它不是我們期望的類型（比如，可能是肥皂）。</li><li><strong>null</strong>：架子裡沒有放任何捲筒。這表示本應有捲筒的位置現在是空的，也就是說，這裡應該有東西，但它被刻意設為空。</li><li><strong>undefined</strong>：寫著衛生紙的標籤，但沒有架子，甚至連放捲筒的位置都不存在。這表示這個標籤指向的位置本來應該有東西，但事實上什麼都沒有。</li></ul><h2 id="同步-異步"><a href="#同步-異步" class="headerlink" title="同步 &#x2F; 異步"></a>同步 &#x2F; 異步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步程式碼會<strong>立即執行</strong>，並且，在執行完成之前，不會移交控制權給其他程式碼。<br>所有同步程式碼會按照其出現的順序依次執行。</p><p><strong>常見範例</strong>：</p><ul><li><code>for</code> 迴圈</li><li>函數調用</li><li>變數賦值</li><li>算術運算</li><li><code>console.log</code></li></ul><p><strong>範例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 立即輸出 0, 1, 2 </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>console.log(&quot;Start&quot;);</code> 立即執行，輸出 <code>Start</code>。</li><li><code>for</code> 迴圈會立即執行每次循環中的 <code>console.log(i)</code>，輸出 <code>0</code>、<code>1</code> 和 <code>2</code>。</li><li><code>console.log(&quot;End&quot;);</code> 會在 <code>for</code> 迴圈執行完成後立即執行，輸出 <code>End</code>。</li></ul><h3 id="異步"><a href="#異步" class="headerlink" title="異步"></a>異步</h3><p><strong>定義</strong></p><p>異步程式碼不會立即執行，而是排入事件循環的任務隊列中，等待主執行堆棧清空後再執行。<br>這允許 JavaScript 在處理其他代碼時進行異步操作。</p><p><strong>常見範例</strong></p><ul><li><code>setTimeout</code> 和 <code>setInterval</code></li><li>網絡請求（<code>fetch</code> 或 <code>XMLHttpRequest</code>）</li><li><code>Promise</code></li><li><code>async/await</code></li><li>事件處理器</li><li>Web Workers</li></ul><p><strong>範例程式碼</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Start&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout&quot;</span>); </span><br><span class="line"><span class="comment">// 輸出會在同步代碼執行完畢後 </span></span><br><span class="line">&#125;, <span class="number">1000</span>); <span class="comment">// 設定延遲 1000 毫秒  </span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>console.log(&quot;Start&quot;);</code> 立即執行，輸出 <code>Start</code>。</li><li><code>setTimeout</code> 的回調函式會被排入事件循環的任務隊列中，設置延遲時間為 1000 毫秒，然後繼續執行同步代碼。</li><li><code>console.log(&quot;End&quot;);</code> 會在 <code>setTimeout</code> 回調函式之前執行，輸出 <code>End</code>。</li><li>當同步代碼執行完成後，事件循環會執行 <code>setTimeout</code> 的回調函式，輸出 <code>Timeout</code>。</li></ul><h2 id="陳述式、表達式及箭頭函式"><a href="#陳述式、表達式及箭頭函式" class="headerlink" title="陳述式、表達式及箭頭函式"></a>陳述式、表達式及箭頭函式</h2><h3 id="1-陳述式（Statement）"><a href="#1-陳述式（Statement）" class="headerlink" title="1. 陳述式（Statement）"></a>1. 陳述式（Statement）</h3><p><strong>定義</strong>：陳述式是執行某種操作的語句，通常不返回值。它描述了程序的行為或控制流。</p><p><strong>特點</strong>：</p><ul><li>執行某種操作，不返回值。</li><li>通常用於控制程序的執行流程。</li></ul><p><strong>範例程式碼</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 賦值陳述式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制流陳述式</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x 大於 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迴圈陳述式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生活中的例子</strong>：</p><ul><li><strong>烹飪食譜中的步驟</strong>：每個步驟（如「把雞肉放入鍋中煎 5 分鐘」）都是一個陳述式。</li><li><strong>決策過程</strong>：例如「如果天氣晴朗，就去散步」，這是一個陳述式。</li><li><strong>設定提醒</strong>：例如「如果早上 7 點鐘，就設定鬧鐘」，這是執行操作的指令。</li></ul><h3 id="2-表達式（Expression）"><a href="#2-表達式（Expression）" class="headerlink" title="2. 表達式（Expression）"></a>2. 表達式（Expression）</h3><p><strong>定義</strong>：表達式是任何可以被計算並返回一個值的代碼片段。它可以是數值、變數、運算符等。</p><p><strong>特點</strong>：</p><ul><li>會返回一個值。</li><li>可以嵌套其他表達式。</li></ul><p><strong>範例程式碼</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 數值表達式</span></span><br><span class="line"><span class="number">5</span> + <span class="number">3</span> <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 變數表達式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; <span class="comment">// 變數 x 是一個表達式，值為 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函式調用表達式</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">5</span>, <span class="number">10</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列和對象表達式</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 陣列</span></span><br><span class="line">&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125; <span class="comment">// 對象</span></span><br></pre></td></tr></table></figure><p><strong>生活中的例子</strong></p><ul><li><strong>數學算式</strong>：例如「5 + 3」，計算結果是 8。</li><li><strong>購物清單中的數量</strong>：例如「3 個蘋果 + 2 個橙子」，可以計算出總數為 5 個水果。</li><li><strong>姓名首字母</strong>：例如 <code>firstName + &quot; &quot; + lastName</code> 會返回 <code>&quot;John Doe&quot;</code>。</li></ul><h3 id="3-箭頭函式"><a href="#3-箭頭函式" class="headerlink" title="3. 箭頭函式 () =&gt; {}"></a>3. 箭頭函式 <code>() =&gt; &#123;&#125;</code></h3><p><strong>定義</strong></p><p>箭頭函式是一種函式表達式，用於定義匿名函式。它是一種表達式，因為它返回一個函式。</p><p><strong>範例程式碼</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 單行表達式的箭頭函式（直接返回計算結果）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行函式，包含多個陳述式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addWithLogging</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sum = a + b;   <span class="comment">// 陳述式</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sum is <span class="subst">$&#123;sum&#125;</span>`</span>); <span class="comment">// 陳述式</span></span><br><span class="line">  <span class="keyword">return</span> sum; <span class="comment">// 返回值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addWithLogging</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 輸出: Sum is 5, 然後是 5</span></span><br></pre></td></tr></table></figure><p><strong>生活中的例子</strong></p><ul><li><strong>自動化工具</strong><br>例如「每次收到新電子郵件時，自動回覆一個預設的訊息」，這是通過函式表達式實現的。</li><li><strong>即時提醒</strong><br>例如「點擊按鈕時顯示提醒訊息」，箭頭函式可以用來設定這個功能，例如 <code>(event) =&gt; alert(&quot;按鈕被點擊了&quot;)</code>。</li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul><li><strong>陳述式</strong>：執行操作的語句，不直接返回值，控制程序流。</li><li><strong>表達式</strong>：可以被計算並返回值，用於計算和賦值。</li><li><strong>箭頭函式</strong>：函式表達式的一種，用於創建函式，可以包含多個陳述式並返回值。</li></ul><h3 id="常見考題"><a href="#常見考題" class="headerlink" title="常見考題"></a>常見考題</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 輸出結果為 10 次 10</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><p><code>setTimeout</code> 函數在 <code>for</code> 迴圈中異步執行，<code>javascript</code> 一次只能處理一件事，<code>for</code> 迴圈屬於同步程式碼，會被立即執行，而 <code>setTimeout</code> 屬於異步程式碼，會等待同步程式碼被執行完畢後才執行。</p><p>由於 <code>var</code> 聲明的變數不是 <code>block scope</code>，因此每個 <code>setTimeout</code> 函式都使用了同一個變數 <code>index</code>，它的最終值是 <code>10</code>，也就是迴圈結束後的值。</p><p>因此，這段範例程式碼最後的結果是輸出 10 次 <code>index</code>，也就是輸出 10 次 10。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> weather = <span class="string">&quot;sunny&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(weather);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showWeatherWrapper</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> weather = <span class="string">&quot;rainy&quot;</span>;</span><br><span class="line">  <span class="title function_">showWeather</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showWeatherWrapper</span>(); <span class="comment">// &quot;sunny&quot;;</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><ol><li><strong>全域變數</strong><ul><li><code>var weather = &quot;sunny&quot;;</code> 在全域作用域中聲明了變數 <code>weather</code>，其值為 <code>&quot;sunny&quot;</code>，這意味著在全域範圍內，<code>weather</code> 的值是 <code>&quot;sunny&quot;</code>。</li></ul></li><li><strong>函式 <code>showWeather</code></strong><ul><li><code>function showWeather() &#123; console.log(weather); &#125;</code> 是一個函式，它會輸出變數 <code>weather</code> 的值。這個函式沒有自己的 <code>weather</code> 變數，它會使用從外部作用域（全域）獲取的 <code>weather</code> 變數。</li></ul></li><li><strong>函式 <code>showWeatherWrapper</code></strong><ul><li><code>function showWeatherWrapper() &#123; var weather = &quot;rainy&quot;; showWeather(); &#125;</code> 是另一個函式。在這個函式內部，聲明了一個新的 <code>weather</code> 變數，其值為 <code>&quot;rainy&quot;</code>。這個變數 <code>weather</code> 僅在 <code>showWeatherWrapper</code> 的作用域內有效。</li></ul></li><li><strong>變數提升（Hoisting）</strong><ul><li>在 JavaScript 中，使用 <code>var</code> 聲明的變數會被提升到其作用域的最上面，但變數的值不會被提升。這意味著 <code>showWeatherWrapper</code> 函式內部的 <code>weather</code> 變數會被提升，但它的初始值是 <code>undefined</code>，直到被賦值為 <code>&quot;rainy&quot;</code>。</li></ul></li><li><strong>函式調用</strong><ul><li>當 <code>showWeatherWrapper()</code> 被調用時，它首先會在其作用域內聲明並初始化 <code>weather</code> 變數為 <code>&quot;rainy&quot;</code>。</li><li>然而，當 <code>showWeatherWrapper</code> 調用 <code>showWeather</code> 函式時，<code>showWeather</code> 函式沒有自己的 <code>weather</code> 變數，它會從外部作用域（全域）中查找 <code>weather</code> 變數。</li><li>因為 <code>showWeather</code> 函式在全域作用域內，所以它獲取的是全域變數 <code>weather</code>，即 <code>&quot;sunny&quot;</code>。</li></ul></li></ol><p><strong>總結</strong><br><code>showWeatherWrapper()</code> 函式內部聲明的 <code>weather</code> 變數僅在 <code>showWeatherWrapper</code> 的作用域內有效，而 <code>showWeather</code> 函式會參考全域作用域中的 <code>weather</code> 變數。由於 <code>showWeather</code> 函式沒有自己的 <code>weather</code> 變數，它會使用全域作用域中的 <code>weather</code> 變數，因此輸出 <code>&quot;sunny&quot;</code>。</p><p>3. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>, party); </span><br><span class="line"><span class="keyword">var</span> note = <span class="string">&quot;ready&quot;</span>; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">note</span> (<span class="params"></span>) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;now party&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>, note);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a party()</span></span><br><span class="line"><span class="comment">// b &quot;ready&quot;</span></span><br></pre></td></tr></table></figure><p>解析：</p><p><code>javascript</code>  中，函式和變數有不同的處理方式，函式宣告會被完全提升，變數只有宣告會被提升，初始化不會，並且在提升中，<strong>函式優先</strong>。</p><h4 id="創造階段（提升階段-創造記憶體空間）"><a href="#創造階段（提升階段-創造記憶體空間）" class="headerlink" title="創造階段（提升階段  &#x2F; 創造記憶體空間）"></a>創造階段（提升階段  &#x2F; 創造記憶體空間）</h4><p>在創造階段，JavaScript 引擎會進行以下操作：</p><ol><li><p><strong>函式宣告提升</strong>：函式 <code>note</code> 會被提升。這意味著函式 <code>note</code> 會在整個作用域內可用，並且會被定義為 <code>function note() &#123; console.log(&quot;now party&quot;); &#125;</code>。</p></li><li><p><strong>變數聲明提升</strong>：變數 <code>note</code> 的聲明會被提升，但還沒有被初始化。</p></li></ol><p>因此，創造階段實際上等同於：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">note</span>(<span class="params"></span>) &#123;    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;now party&quot;</span>);  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> note; <span class="comment">// 這裡變數 note 被提升，但還沒有被初始化</span></span><br></pre></td></tr></table></figure><h4 id="執行階段"><a href="#執行階段" class="headerlink" title="執行階段"></a>執行階段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在創造階段後，會按照程式碼順序，執行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>, note); <span class="comment">// 因為函式優先，這裡的 note 會被識別為函式 note</span></span><br><span class="line">note = <span class="string">&quot;ready&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>, note); <span class="comment">// 因為重新賦值給 note 了，這裡的 note 會被識別為字串 &quot;ready&quot;</span></span><br></pre></td></tr></table></figure><p>同理，以下的狀況也會回傳函式而不是 <code>undefined</code>，因為<strong>函式優先</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">snacks</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;snack function&#x27;</span>); &#125;</span><br><span class="line"><span class="keyword">var</span> snacks;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a,&#x27;</span>, snacks); <span class="comment">// a, snacks()&#123; console.log(&#x27;snack function&#x27;); &#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以將變數提升和函式優先比喻為一個超市會員卡和貴賓卡的故事：</p><p><strong>函式就像是貴賓卡</strong>：</p><ul><li>想像你有一張超市的貴賓卡，這張卡可以讓你享有更多的折扣和福利。這張貴賓卡代表一個函式。</li><li>貴賓卡的重要性非常高，所以一旦你擁有它，<strong>無論發生什麼情況，這張卡都會優先被認定和使用</strong>。</li></ul><p><strong>變數就像是普通會員卡</strong>：</p><ul><li>除了貴賓卡，你還有一張普通的會員卡，這張卡也能讓你享受一些基本的折扣。這張會員卡代表一個變數。</li><li>這張會員卡的權限不如貴賓卡高，<strong>只有當你沒有貴賓卡時，它才會被使用。</strong></li></ul><h4 id="事件流程"><a href="#事件流程" class="headerlink" title="事件流程"></a>事件流程</h4><ol><li><p><strong>創造階段（超市開門前準備）</strong>：</p><ul><li>超市確認你擁有一張貴賓卡，並將這張卡準備好在前台以便隨時使用。此時，貴賓卡已經被認定為有效。</li><li>同時，超市也準備好你的會員卡，但此時它還沒有被激活（尚未賦值），只是一張空白卡。</li></ul></li><li><p><strong>執行階段（購物過程）</strong>：</p><ul><li>當你走進超市（程式開始執行），你先向收銀員出示你的卡片。</li><li><strong>第一次出示卡片</strong>：你先展示你的卡片，收銀員看到你有一張貴賓卡（函式），所以她立即認定這張卡是有效的，並開始給你打折（這對應於第一次 <code>console.log</code> 輸出函式）。</li><li><strong>激活會員卡</strong>：接著，你說你其實想用會員卡（變數賦值）。這時候，貴賓卡的效果被暫時覆蓋，收銀員記下了會員卡的折扣（這對應於變數賦值 <code>&quot;ready&quot;</code>）。</li><li><strong>第二次出示卡片</strong>：你再一次展示卡片，這次收銀員認定你要用會員卡，因為你剛剛激活了它，所以這次使用的是會員卡（這對應於第二次 <code>console.log</code> 輸出 <code>&quot;ready&quot;</code>）。</li><li><strong>第三次出示卡片</strong>：你再展示一次卡片，這時候仍然是會員卡在生效，所以結果還是會員卡的折扣（這對應於第三次 <code>console.log</code> 輸出 <code>&quot;ready&quot;</code>）。</li></ul></li></ol><p>注意到了嗎？</p><p>貴賓卡（函式）的優先權總是比會員卡（變數）高，所以即使我有一張未激活的會員卡，超市還是會認定我的貴賓卡先有效（函式優先於變數提升）。只有<strong>當我主動激活會員卡（賦值變數），才會覆蓋貴賓卡（函式）的效果。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
